<pre>
  OEP: 11
  Title: dAPI for Mobile
  Author: Josh Chow <josh_chow@163.com>, Min Xiao, Ning Hu, Lingxiao Su, Dashuang Wang .
  Type: Standard
  Status: POC
  Created: 2018-12-6
</pre>

==Abstract==
The OEP-11 Proposal is a standard interface like dAPI in Mobile. Support dApp wake up Provider and Provider scan QR code.

==Motivation==
dAPI currently only supports chrome extension and desktop, which cannot be used on the mobile side, Unable to meet a large number of mobile DAPP.



==Specification==

There are three Scenario will use H5 dApp login authorization and invoke smart contract request

* Scenario 1: Web generate  QR code, The Mobile Wallet App scans the QR code for login and invoke smart contract request.

* Scenario 2: The DApp wakeup Mobile Wallet App for login authorization and invoke smart contract request.

* Scenario 3:  H5 dApp is embedded in Mobile Wallet App. Open H5 dApp for login authorization and H5 dApp invoke smart contract request.


==Flow of the Protocol==

1. The Wallet App registers the intercept protocol in the Mobile

The Wallet App first registers the intercept protocol (URL Scheme, appLink) in Mobile such that the H5 dapp can wakeup the Wallet App.

DApp calls this protocol and send data to the Mobile Wallet App. The request format of data is structured as:

ontwallet://ont.io?param={the json data}


2. Login


[[Image:https://images-cdn.shimo.im/z5aJ1nw4NnEjGcYQ/image.png!thumbnail|login]]


3. Invoke smart contract


[[Image:https://i.imgur.com/x8dT0G5.png|invoke]]


=== DApp ===

==== DApp front end ====

=====Wakeup Provider for login DApp =====

1. wakeup Provider: send message for user signature

<pre>
{
	"action": "login",
	"params": {
		"type": "ontid or account",
		"method": "post",
		"message": "HgigFdfwf",
		"callback": "http://127.0.0.1:80/login/callback"
	}
}

</pre>

2. Provider send message, publicKey and signature to callback url.

<pre>
{
	"action": "login",
	"params": {
		"type": "ontid or account",
		"publicKey": "",
		"address": "",
		"ontid": "",
		"message": "HgigFdfwf",
		"signature": ""
	}
}
</pre>

=====Wakeup Provider for invoke smartcontract=====

1. wakeup Provider: send dApp owner signed transaction

if user has logined.

<pre>
{
	"action": "invoke",
	"params": {
		"login": true,
		"url": "http://127.0.0.1:80/rawtransaction/txhash",//optional: get signedTx from DApp backend
		"message": "will pay 1 ONT in this transaction",//optional
		"signedTx": "00d000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000004010b506172616d436f6e66696703312e300d4f6e746f6c6f6779205465616d0e636f6e74616374406f6e742e696f2b436861696e20476c6f62616c20456e7669726f6e6d656e74205661726961626c6573204d616e61676572200000"
	}
}
</pre>

only method and parameters, dont need signature, Provider help make transaction:
<pre>
{
	"action": "invoke",
	"params": {
		"login": true,
		"url": "http://127.0.0.1:80/rawtransaction/txhash",
		"message": "will pay 1 ONT in this transaction",
		"invokeConfig": {
			"contractHash": "16edbe366d1337eb510c2ff61099424c94aeef02",
			"functions": [{
				"operation": "method name",
				"args": [{
					"name": "arg0-list",
					"value": [true, 100, "Long:100000000000", "Address:AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ", "ByteArray:aabb", "String:hello", [true, 100], {
						"key": 6
					}]
				}, {
					"name": "arg1-map",
					"value": {
						"key": "String:hello",
						"key1": "ByteArray:aabb",
						"key2": "Long:100000000000",
						"key3": true,
						"key4": 100,
						"key5": [100],
						"key6": {
							"key": 6
						}
					}
				}, {
					"name": "arg2-str",
					"value": "String:test"
				}]
			}],
			"payer": "AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ",
			"gasLimit": 20000,
			"gasPrice": 500,
			"signature": {
				"m": 1,
				"signers": ["AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ"]
			}
		}
	}
}
</pre>

or

if user didn't login:

<pre>
{
	"action": "invoke",
	"params": {
		"login": false,
		"method": "post",
		"url": "http://127.0.0.1:80/login/callback"
	}
}

</pre>

then Provider post Address to DApp backend, DApp backend return  signedTx



==== DApp back end ====

===== Login Api =====

reveive signed message ,verify message, send verify result to front end

=====  Transaction make and signature=====

* if user logined, make and signature transaction for front end

* if user not logined, DApp backend received Provider post Address, response  signedTx to Provider

===== Synchronize transction events =====

synchronize transction events of Smartcontract


=== Provider ===

Provider support receive wakeup form Dapp and scan QrCode of DApp website.

====Scan message QrCode====

1. scan message

2. verify dApp owner signature

3. User add signature in Provider

4. Provider send message, publicKey and signature to callback url.


<pre>
{
	"action": "login",
	"params": {
		"type": "ontid or account",
		"method": "post",
		"message": "HgigFdfwf",
		"callback": "http://127.0.0.1:80/login/callback"
	}
}
</pre>

Provider response:

<pre>
{
	"action": "login",
	"params": {
		"type": "ontid or account",
		"publicKey": "",
		"address": "",
		"ontid": "",
		"message": "HgigFdfwf",
		"signature": ""
	}
}

</pre>

====Scan transaction QrCode====

1. scan transaction

2. verify dApp owner signature

3. add user signature

4. send to blockchain

if user has logined:
<pre>
{
	"action": "invoke",
	"params": {
		"login": true,
		"url": "http://127.0.0.1:80/rawtransaction/txhash",//optional: get signedTx from DApp backend
		"message": "will pay 1 ONT in this transaction",//optional
		"signedTx": "00d000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000004010b506172616d436f6e66696703312e300d4f6e746f6c6f6779205465616d0e636f6e74616374406f6e742e696f2b436861696e20476c6f62616c20456e7669726f6e6d656e74205661726961626c6573204d616e61676572200000"
	}
}
</pre>

only method and parameters, dont need signature, Provider help make transaction:
<pre>
{
	"action": "invoke",
	"params": {
		"login": true,
		"url": "http://127.0.0.1:80/rawtransaction/txhash",
		"message": "will pay 1 ONT in this transaction",
		"invokeConfig": {
			"contractHash": "16edbe366d1337eb510c2ff61099424c94aeef02",
			"functions": [{
				"operation": "method name",
				"args": [{
					"name": "arg0-list",
					"value": [true, 100, "Long:100000000000","Address:AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ", "ByteArray:aabb", "String:hello", [true, 100], {
						"key": 6
					}]
				}, {
					"name": "arg1-map",
					"value": {
						"key": "String:hello",
						"key1": "ByteArray:aabb",
						"key2": "Long:100000000000",
						"key3": true,
						"key4": 100,
						"key5": [100],
						"key6": {
							"key": 6
						}
					}
				}, {
					"name": "arg2-str",
					"value": "String:test"
				}]
			}],
			"payer": "AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ",
			"gasLimit": 20000,
			"gasPrice": 500,
			"signature": {
				"m": 1,
				"signers": ["AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ"]
			}
		}
	}
}
</pre>

or

if user didn't login:

<pre>
{
	"action": "invoke",
	"params": {
		"login": false,
		"method": "post",
		"url": "http://127.0.0.1:80/login/callback"
	}
}

</pre>
then provider post Address to DApp backend, DApp backend return  signedTx


===Error code===

response example:
<pre>
{
	"action": "login",
	"error": 0,
	"desc": "SUCCESS",
	"result": true
}

</pre>
{| border="0" style="border-collapse:collapse"
| Error Code
|  description
|-
| 0
| SUCCESS
|-
| 80001
| params error
|-
| 80002
| method error
|-
| 80003
| internal error
|}


==Implementation==
Example implementations are available:






==== Split login and invoke smart contract ====

[[Image:split-login-invoke.png|split-login-invoke]]

==== Invoke smart contract with login ====

[[Image:invoke-with-login.png|invoke-with-login]]