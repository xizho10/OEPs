<pre>
  OEP: 11
  Title: dAPI for Mobile
  Author: Josh Chow <josh_chow@163.com>, Min Xiao, Ning Hu, Lingxiao Su, Dashuang Wang .
  Type: Standard
  Status: POC
  Created: 2018-12-6
</pre>

==Abstract==
The OEP-11 Proposal is a standard interface like dAPI in Mobile. Support dApp wake up Provider and Provider scan QR code.





==Motivation==
dAPI currently only supports chrome extension and desktop, which cannot be used on the mobile side, Unable to meet a large number of mobile DAPP.



There are three Scenario will use in Mobile dApp

=== Scenario 1: Provider scan QR code  ===

Web generate  QR code, Provider scans the QR code for login and invoke smart contract request.

=== Scenario 2:  DApp wakeup Provider ===

The DApp wakeup Provider for login authorization and invoke smart contract request.

=== Scenario 3: Provider open DApp ===

H5 dApp is embedded in Provider. Open H5 dApp for login authorization and H5 dApp invoke smart contract request.


==Specification==

The main interface of dApi mobile:

* getAccount or getIdentity: DApp getAccount or getIdentity from Provider
* Login: DApp send login message, Provider response Signed message.
* Invoke smart contract: DApp send invoke request. Provider signature and send to MainNet.
* Transfer ONT/ONG: the same to invoke smart contract.




=== Flow of the Protocol===


The Provider registers the intercept protocol (URL Scheme, appLink) in Mobile for the H5 DApp can wakeup the Wallet App.

DApp calls this protocol and send data to Provider. The request format of data is structured as:

ontprovider://ont.io?param={the json data}



====  Login====


[[Image:login.png|login]]


====  Invoke Smart Contract ====


[[Image:invoke.png|invoke]]




=== Protocol data format ===

request message
<pre>
{
    action	string   // action
    version     string   // version
    params      object   // action parameter
}
</pre>
response message
<pre>
{
    action    string   // action
    version   string   // version
    error     int      // error code
    desc      string   // desc of error code
	result    string   // result
}
</pre>

====Login====

login params

<pre>
{
    type        string  // ontid or account
    dappName    string   // dApp name
    dappIcon    string   // dApp icon
    message     string   // message for signature
    expired     long    // QRcode expire time
    post        string   // callback method
    callback	string   // callback url of dapp server
}
</pre>

<pre>
{
	"action": "login",
	"version": "v1.0.0",
	"params": {
		"type": "ontid or account",
		"dappName": "dapp Name",
		"dappIcon": "dapp Icon",
		"message": "HgigFdfwf",
		"expired": "20181215152730", // QR Code expire time
		"method": "post",
		"callback": "http://127.0.0.1:80/login/callback"
	}
}

</pre>

response:

<pre>
{
	"action": "login",
	"version": "v1.0.0",
	"error": 0,
	"desc": "SUCCESS",
	"result": {
		"type": "ontid or account",
		"publicKey": "",
		"address": "",
		"ontid": "",
		"message": "HgigFdfwf",
		"signature": ""
	}
}
</pre>

====Invoke Smart Contract====

Invoke Smart Contract params
{
    login         bool    // logined or not
    message      string   // message show in Provider, optional
    invokeConfig  long    // invoke config parameter
    signedTx	  string   // if use invokeConfig, dont need signedTx
}

if user has logined.

<pre>
{
	"action": "invoke",
	"version": "v1.0.0",
	"params": {
		"login": true,
		"url": "http://127.0.0.1:80/rawtransaction/txhash",//optional: get signedTx from DApp backend
		"message": "will pay 1 ONT in this transaction",//optional
		"signedTx": "00d000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000004010b506172616d436f6e66696703312e300d4f6e746f6c6f6779205465616d0e636f6e74616374406f6e742e696f2b436861696e20476c6f62616c20456e7669726f6e6d656e74205661726961626c6573204d616e61676572200000"
	}
}
</pre>

only method and parameters, dont need signature, Provider help make transaction:
<pre>
{
	"action": "invoke",
	"version": "v1.0.0",
	"params": {
		"login": true,
		"url": "http://127.0.0.1:80/rawtransaction/txhash",
		"message": "will pay 1 ONT in this transaction",
		"invokeConfig": {
			"contractHash": "16edbe366d1337eb510c2ff61099424c94aeef02",
			"functions": [{
				"operation": "method name",
				"args": [{
					"name": "arg0-list",
					"value": [true, 100, "Long:100000000000", "Address:AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ", "ByteArray:aabb", "String:hello", [true, 100], {
						"key": 6
					}]
				}, {
					"name": "arg1-map",
					"value": {
						"key": "String:hello",
						"key1": "ByteArray:aabb",
						"key2": "Long:100000000000",
						"key3": true,
						"key4": 100,
						"key5": [100],
						"key6": {
							"key": 6
						}
					}
				}, {
					"name": "arg2-str",
					"value": "String:test"
				}]
			}],
			"payer": "AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ",
			"gasLimit": 20000,
			"gasPrice": 500,
			"signature": [{
				"m": 1,
				"signers": ["AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ"]
			}]
		}
	}
}
</pre>

or

if user didn't login:

<pre>
{
	"action": "invoke",
	"version": "v1.0.0",
	"params": {
		"login": false,
		"method": "post",
		"url": "http://127.0.0.1:80/login/callback"
	}
}

</pre>
then Provider post Address to DApp backend, DApp backend return  signedTx

response:

<pre>
{
	"action": "invoke",
	"version": "v1.0.0",
	"error": 0,
	"desc": "SUCCESS",
	"result": "tx hash"
}

</pre>

====Transfer ONT/ONG====

<pre>
{
	"action": "invoke",
	"version": "v1.0.0",
	"params": {
    "invokeConfig": {
			"contractHash": "0200000000000000000000000000000000000000",
			"functions": [{
				"operation": "transfer",
				"args": [{
					"name": "arg0-from",
					"value": "Address:AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ"]
				}, {
					"name": "arg1-to",
					"value": "Address:AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ"
				}, {
					"name": "arg2-amount",
					"value": "Long:1000000000"
				}]
			}],
			"payer": "AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ",
			"gasLimit": 20000,
			"gasPrice": 500,
			"signature": [{
				"m": 1,
				"signers": ["AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ"]
			}]
		}
	}
}

</pre>

response:

<pre>
{
	"action": "invoke",
	"version": "v1.0.0",
	"error": 0,
	"desc": "SUCCESS",
	"result": {
	}
}
</pre>

=== DApp front end ===

=====Scenario 2: Wakeup Provider for login DApp =====

1. wakeup Provider: send message for user signature



2. Provider send message, publicKey and signature to callback url.



=====Scenario 2: Wakeup Provider for invoke smartcontract=====

1. wakeup Provider: send dApp owner signed transaction



then Provider post Address to DApp backend, DApp backend return  signedTx



=== DApp back end ===

=====Scenario 1 and 2: Login Api =====

reveive signed message ,verify message, send verify result to front end

=====  Transaction make and signature=====

* if user logined, make and signature transaction for front end

* if user not logined, DApp backend received Provider post Address, response  signedTx to Provider

===== Synchronize transction events =====

synchronize transction events of Smartcontract


=== Provider ===

Provider support receive wakeup form Dapp and scan QrCode of DApp website.

====Scenario 1: Scan login message QrCode====

1. scan message

2. verify dApp owner signature

3. User add signature in Provider

4. Provider send message, publicKey and signature to callback url.



====Scenario 1: Scan transaction QrCode====

1. scan transaction

2. verify dApp owner signature

3. add user signature

4. send to blockchain






====Scenario 3: H5 DApp login after be opened in Provider====

1. H5 DApp: send message for user signature



2. Provider send message, publicKey and signature to H5 DApp.



====Scenario 3: H5 DApp invoke smartcontract====

the message the same to Scan transaction QrCode


===Error code===

response example:
<pre>
{
	"action": "login",
	"error": 0,
	"desc": "SUCCESS",
	"result": true
}

</pre>
{| border="0" style="border-collapse:collapse"
| Error Code
|  description
|-
| 0
| SUCCESS
|-
| 80001
| params error
|-
| 80002
| method error
|-
| 80003
| internal error
|}


==Implementation==
Example implementations are available:






==== Split login and invoke smart contract ====

[[Image:split-login-invoke.png|split-login-invoke]]

==== Invoke smart contract with login ====

[[Image:invoke-with-login.png|invoke-with-login]]