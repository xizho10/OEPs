<pre>
  OEP: 11
  Title: dAPI for Mobile
  Author: Josh Chow <josh_chow@163.com>, Min Xiao, Ning Hu, Lingxiao Su, Dashuang Wang .
  Type: Standard
  Status: POC
  Created: 2018-12-6
</pre>

==Abstract==
The OEP-11 Proposal is a standard interface like dAPI in Mobile. Support dApp wake up Provider and Provider scan QR code.

==Motivation==
dAPI currently only supports chrome extension and desktop, which cannot be used on the mobile side, Unable to meet a large number of mobile DAPP.

==Specification==

API for App wake up and QR code scan in Mobile

=== DApp ===

==== DApp front end ====

=====Wakeup Provider for login DApp =====

1. wakeup Provider: send message for user signature

<pre>
{
    "type": "login",
    "method":"post",
	"message": "HgigFdfwf",
	"callback": "http://127.0.0.1:80/callback"
}
</pre>

=====Wakeup Provider for invoke smartcontract=====

1. wakeup Provider: send dApp owner signed transaction

<pre>
{
    "type": "invoke",
    "login": true,
    "url": "http://127.0.0.1:80/rawtransaction/txhash", //optional: get signedTx from DApp backend
	"signedTx": "00d000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000004010b506172616d436f6e66696703312e300d4f6e746f6c6f6779205465616d0e636f6e74616374406f6e742e696f2b436861696e20476c6f62616c20456e7669726f6e6d656e74205661726961626c6573204d616e61676572200000"
}
</pre>

or

<pre>
{
    "type": "invoke",
    "login": false,
    "method":"post",
    "url": "http://127.0.0.1:80/buy",
}

</pre>




==== DApp back end ====

===== Login Api =====

reveive signed message ,verify message, notify front end

=====  Transaction make and signature=====

* if user logined, make and signature transaction for front end

* if user not logined, DApp backend received Provider post Address, response  signedTx to Provider

===== Synchronize transction events =====

synchronize transction events of Smartcontract


=== Provider ===

Provider support receive wakeup form Dapp and scan QrCode of DApp website.

====Scan message QrCode====

1. scan message

2. verify dApp owner signature

3. add user signature

4. send to callback url


<pre>
{
	"message": "HgigFdfwf",
	"callback": "url"
}
</pre>

====Scan transaction QrCode====

1. scan transaction

2. verify dApp owner signature

3. add user signature

4. send to blockchain

<pre>
{
    "type": "invoke",
    "login": true,
    "url": "http://127.0.0.1:80/rawtransaction/txhash", //optional: get signedTx from DApp backend
	"signedTx": "00d000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000004010b506172616d436f6e66696703312e300d4f6e746f6c6f6779205465616d0e636f6e74616374406f6e742e696f2b436861696e20476c6f62616c20456e7669726f6e6d656e74205661726961626c6573204d616e61676572200000"
}
</pre>

or

<pre>
{
    "type": "invoke",
    "login": false,
    "method":"post",
    "url": "http://127.0.0.1:80/buy",
}

</pre>
then provider post Address to DApp backend, return  signedTx



==Implementation==
Example implementations are available:






==== Split login and invoke smart contract ====

[[Image:split-login-invoke.png|split-login-invoke]]

==== Invoke smart contract with login ====

[[Image:invoke-with-login.png|invoke-with-login]]